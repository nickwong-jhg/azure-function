name: Test and Deploy (Functions Core Tooling)

on:
  #push:
  #  branches: [ main ]
  #  paths-ignore: 
  #    - '**/README.md'
  #    - '**/*.yml'
  #pull_request:
  #  branches: [ main ]
  workflow_dispatch:
  
env:
  AZURE_FUNCTIONAPP_NAME: github-test-app # set this to the name of your azure function app resource
  AZURE_FUNCTION_PROJ_PATH: src/FunctionApp  # set this to the path to your function app project
  ROOT_SOLUTION_PATH: src # set this to the root path of your solution/project file
  AZURE_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION }}  # Azure subscription ID stored in GitHub secrets
  DOTNET_VERSION: '8.x'  # Specify your .NET SDK version
  RESOURCE_GROUP: 'github-poc'  # Replace with your Azure Resource Group name
  STORAGE_ACCOUNT_NAME: 'sa-github-poc'
  STORAGE_ACCOUNT_SKU: 'Standard_LRS'
  REGION: 'australiaeast'  # Replace with the Azure region for your function app
  APP_SERVICE_PLAN_SKU: B1  # App Service Plan SKU, e.g., S1 (Standard), P1V2 (Premium), etc.

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set 'set -e' to stop the job on any failure
        run: |
          set -e  # This applies to all commands in this step and subsequent steps in this job
          
      - name: Authenticate to Azure as a Service Principal
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDS_FUNCTION_APP }}
    
      - name: Get the latest source code commit
        uses: actions/checkout@v2        
              
      - name: List project files before build.settings.json rename
        run: tree
        working-directory: ${{ env.AZURE_FUNCTION_PROJ_PATH }}
        
      - name: Rename build.settings.json to local.settings.json
        run: mv build.settings.json local.settings.json
        working-directory: ${{ env.AZURE_FUNCTION_PROJ_PATH }}
      
      - name: List project files after build.settings.json rename
        run: tree
        working-directory: ${{ env.AZURE_FUNCTION_PROJ_PATH }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        
      - name: Restore dependencies
        run: dotnet restore
        working-directory: ${{ env.ROOT_SOLUTION_PATH }}

      - name: Build for Testing
        run: dotnet build --no-restore
        working-directory: ${{ env.ROOT_SOLUTION_PATH }}
      
      - name: Test
        run: dotnet test --no-build --verbosity normal
        working-directory: ${{ env.ROOT_SOLUTION_PATH }}
      
      - name: Clean debug configuration output
        run: dotnet clean
        working-directory: ${{ env.ROOT_SOLUTION_PATH }}
            
      - name: Build Function App for Release
        run: dotnet build ${{ env.AZURE_FUNCTION_PROJ_PATH }} --configuration Release
      
      - name: Create or Update the Storage Account
        run: |
          echo "Creating or updating the storage account..."
          az storage account create \
            --name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location ${{ env.REGION }} \
            --sku ${{ env.STORAGE_ACCOUNT_SKU }} \
            --kind StorageV2 || echo "Storage account exists, skipping creation."

      - name: Create or Update the App Service Plan
        run: |
          echo "Creating or updating the App Service Plan..."
          az appservice plan create \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }}-plan \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location ${{ env.REGION }} \
            --sku ${{ env.APP_SERVICE_PLAN_SKU }} \
            --is-linux || echo "App Service Plan exists, skipping creation."

      - name: Upsert the Function App (Create or Update)
        run: |
          # Attempt to create the Function App. If it already exists, it won't error out.
          az functionapp create --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
                                 --resource-group ${{ env.RESOURCE_GROUP }} \
                                 --plan ${{ env.AZURE_FUNCTIONAPP_NAME }}-plan \
                                 --runtime dotnet \
                                 --runtime-version 8 \
                                 --storage-account ${{ env.STORAGE_ACCOUNT_NAME }}
                                 --region ${{ env.REGION }} || echo "Function App exists, skipping creation."

      - name: Install Azure Functions Core Tools
        run: npm i -g azure-functions-core-tools@3 --unsafe-perm true
      
      - name: Publish Azure Function App
        run: func azure functionapp publish ${{ env.AZURE_FUNCTIONAPP_NAME }}
        working-directory: ${{ env.AZURE_FUNCTION_PROJ_PATH }}
